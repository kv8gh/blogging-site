generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Replace with your database provider
  url      = env("DATABASE_URL") // Store the connection string in .env
}

// User Model
model User {
  id            String   @id @default(uuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  password      String?  // Optional for OAuth users
  domain        String?   
  blogs         Blog[]
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Session Model
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Account Model
model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Add compound unique constraint for NextAuth
  @@unique([provider, providerAccountId])
}

// Verification Token Model (Optional for Email Verification)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Blog Model
model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
